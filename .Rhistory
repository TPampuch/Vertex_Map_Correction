order(s$z)
s
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = s$z)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
na.omit(dat2$Y.m.)
x <- na.omit(dat2$Y.m.)
y <- na.omit(dat2$X.m.)
z <- na.omit(dat2$ALTITUDE)
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., color = ~base, type = "scatter3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
s$z
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = as.matrix(s$z), x = s$x, y = s$y)
fig
s <- interp(x = x, y = y, z = z, duplicate = "median")
p <- plot_ly(x = s$x, y = s$y, z = s$z) %>% add_surface()
p
x <- na.omit(dat2$Y.m.)
y <- na.omit(dat2$X.m.)
z <- na.omit(dat2$ALTITUDE)
p <- plot_ly(x = s$x, y = s$y, z = s$z, type = "scatter3d") %>% add_surface()
p
p <- plot_ly(x = s$x, y = s$y, z = s$z, type = "scatter3d")
p
p <- plot_ly(x = s$x, y = s$y, z = s$z) %>% add_surface()
p
p <- plot_ly(x = x, y = y, z = z) %>% add_surface(z = s$z, x = s$x, y = s$y)
p
p <- plot_ly(x = x, y = y, z = z, type="scatter3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
p
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "mesh3d'") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, type = "mesh3d'") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, type = "mesh3d'") #%>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, type = "mesh3d") #%>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, type = "mesh3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, type = "mesh3d")
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "mesh3d")
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d")
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = s$z, color = ~base, type = "scatter3d")
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface()
fig
s$z
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = s$z)
fig
x
z
?interp
s
plot(x, y)
plot(z)
plot(x,z)
p <- plot_ly(x = x, y = y, z = z, type="scatter3d")# %>% add_surface(z = s$z, x = s$x, y = s$y)
p
plot(y,z)
plot_ly
?lot_ly
?plot_ly
p <- plot_ly(x = x, y = y, z = z, type="scatter3d") %>% add_surface(z = s$z, x = s$x, y = s$y)
p
p <- plot_ly(x = x, y = y, z = z, type="scatter3d") %>% add_surface(z = s$z)
p
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") %>% add_surface(z = s$z)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") #%>% add_surface(z = s$z)
fig
dat2$base
dat2 <- dat2 %>% filter(base %in% c(1,2,3,4,5,6) )
library(plotly)
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") #%>% add_surface(z = s$z)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d")  +
theme(aspect.ratio=1)#%>% add_surface(z = s$z)
fig
fig <- plot_ly(dat2, y = ~X.m., x = ~Y.m., z = ~ALTITUDE, color = ~base, type = "scatter3d") #%>% add_surface(z = s$z)
fig
devtools::install_github("TPampuch/Vertex_Map_Correction") # install VMC package
library(spThin)
?thin
occ_clean <- read.csv('C:/Users/Timo Pampuch/Desktop/Freddy_SDM_models/spthin/202201_occ_gbif_mario_arctos_CAfi_sub_cleaned.csv')
occ_cl<- occ_clean[,-1]
names(occ_cl)
occ_cl
occ_thinned <-
thin(loc.data = occ_cl,
lat.col = 'latitude', long.col = 'longitude',
spec.col = 'scientificName',
thin.par = 29.65415, reps = 150,
locs.thinned.list.return = TRUE,
write.files = TRUE,
write.log.file = TRUE,
out.dir = '',
out.base = 'occ_thinned')
occ_thinned <-
thin(loc.data = occ_cl,
lat.col = 'latitude', long.col = 'longitude',
spec.col = 'scientificName',
thin.par = 29.65415, reps = 1,
locs.thinned.list.return = TRUE,
write.files = TRUE,
write.log.file = TRUE,
out.dir = '',
out.base = 'occ_thinned')
rm(list = ls()) # clean environment
library(VMC)
library(ggplot2) # ggplot and
library(ggrepel) # ggrepel are only used for plotting
data(map, package = "VMC") # load example data
head(map)
dat2 <- VMC(map, Base_ID = "base", plot = T, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE") # its still returning a list. I'll remove this inconvenience in the next version
?VMC
data = dat 2
data = dat2
head(data)
head(data)[[1]]
dat2 <- VMC(map, Base_ID = "base", plot = F, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE") # its still returning a list. I'll remove this inconvenience in the next version
data = dat2
head(data)
data(meuse)
library(sp)
library(rgdal)
library(raster)
install.packages(plotKML)
install.packages("plotKML")
library(mapview)
library(plotKML)
coordinates(data) <- ~Y.m.+X.m.
install.packages("plotKML")
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+init=epsg:4326")
head(data)
data = dat2
head(data)
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6W +ellps=WGS84 +datum=WGS84 +units=m")
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6W +ellps=WGS84 +datum=WGS84 +units=m")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6V +units=m")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +units=m")
mapView(data)
data
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~X.m.+Y.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=WGS84 +units=m")
mapView(data)
data
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=WGS84 +units=m +north")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=WGS84 +units=m +north")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6N +datum=WGS84 +units=m +north")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=ETSR89 +units=m")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=GRS80 +units=m")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +datum=GRS80 +units=m")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=GRS80 +units=m")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=GRS80 +units=m")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=GRS80 +datum=GGRS87 +units=m +north")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +ellps=ETRS89 +datum=GGRS87 +units=m +north")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +units=m")
mapView(data)
data
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6V +units=m")
data
data
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6N +units=m")
data
plot(data)
map(data)
data
data = dat2
head(data)
data$y = data$X.m.
data$x = data$Y.m.
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m +south")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m +south")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$Y.m.
data$x = data$X.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+proj=utm +zone=5 +units=m")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+zone=6 +units=m +proj=longlat +datum=WGS84")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+zone=6 +units=m +proj=UTM +datum=WGS84")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+zone=6 +units=m +proj=UTM +datum=WGS84")
mapView(data)
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+zone=6 +units=m +proj=UTM")
mapView(data)
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data$x = data$Y.m.
data <- na.omit(data)
coordinates(data) <- ~x+y
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
read.csv("D:/PhD stuff/R-Space/Mapping/data/DF_mapRAW.csv")
a <- read.csv("D:/PhD stuff/R-Space/Mapping/data/DF_mapRAW.csv")
View(a)
dat2
dat2$X.m.
a$X.m.
dat2$X.m.
a$X.m.
dat2$X.m. <- a$X.m.
dat2$Y.m. <- a$Y.m.
map <- dat2
save(map, "D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
data(map, package = "VMC") # load example data
a <- read.csv("D:/PhD stuff/R-Space/Mapping/data/DF_mapRAW.csv")
data(map, package = "VMC")
# get origial coordinates back
a <- read.csv("D:/PhD stuff/R-Space/Mapping/data/DF_mapRAW.csv")
data(map, package = "VMC")
map$X.m. <- a$X.m.
map$Y.m. <- a$Y.m.
save(map, file = "D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
data(map, package = "VMC") # load example data
head(map)
load(file = "D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData"
load(file = "D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
load("D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
head(map)
dat2 <- VMC(map, Base_ID = "base", plot = F, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
data$y = data$X.m.
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
install.packages("plotkml")
library(maptools)
data
writeOGR(data, dsn="DF.kml", driver = "KML")
writeOGR(data, dsn="DF.kml", layer = "Tree_ID", driver = "KML")
getwd()
setwd("D:/PhD stuff/R-Space")
writeOGR(data, dsn="DF.kml", layer = "Tree_ID", driver = "KML")
load("D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
head(map)
dat2 <- VMC(map, Base_ID = "base", plot = F, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
library(maptools)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
setwd("D:/PhD stuff/R-Space")
writeOGR(data, dsn="DF.kml", layer = "ALTITUDE", driver = "KML")
data
load("D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
head(map)
dat2 <- VMC(map, Base_ID = "base", plot = F, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
library(maptools)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
setwd("D:/PhD stuff/R-Space")
writeOGR(data, dsn="DF.kml", layer = "data", driver = "KML")
mapView(data)
install.packages("plotGoogleMaps")
install.packages("plotGoogleMaps", repos="http://R-Forge.R-project.org")
install.packages("spacetime")
install.packages("plotGoogleMaps", repos="http://R-Forge.R-project.org")
load("D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/data/map.RData")
head(map)
dat2 <- VMC(map, Base_ID = "base", plot = F, limit = 50, Tree_ID = "Tree_ID", z_corr = T, Tree_DBH = "DBH_cm", Alt_col = "ALTITUDE")
data = dat2
head(data)
library(sp)
library(rgdal)
library(raster)
library(mapview)
library(maptools)
data <- na.omit(data)
coordinates(data) <- ~Y.m.+X.m.
proj4string(data) <- CRS("+proj=utm +zone=6 +units=m")
mapView(data)
setwd("D:/PhD stuff/R-Space")
writeOGR(data, dsn="DF", layer = "data", driver = "ESRI Shapefile")
setwd("D:/PhD stuff/R-Space/Map Correction Vertex LaserGeo 360/VMC/")
devtools::document()
devtools::install_github("TPampuch/Vertex_Map_Correction") # install VMC package
